/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.yyms.adp.aaa.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.yyms.adp.aaa.model.YCustomer;
import com.yyms.adp.aaa.service.YCustomerLocalService;
import com.yyms.adp.aaa.service.persistence.YCustomerPersistence;
import com.yyms.adp.aaa.service.persistence.YServicesPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the y customer local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.yyms.adp.aaa.service.impl.YCustomerLocalServiceImpl}.
 * </p>
 *
 * @author USER
 * @see com.yyms.adp.aaa.service.impl.YCustomerLocalServiceImpl
 * @see com.yyms.adp.aaa.service.YCustomerLocalServiceUtil
 * @generated
 */
public abstract class YCustomerLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements YCustomerLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.yyms.adp.aaa.service.YCustomerLocalServiceUtil} to access the y customer local service.
	 */

	/**
	 * Adds the y customer to the database. Also notifies the appropriate model listeners.
	 *
	 * @param yCustomer the y customer
	 * @return the y customer that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public YCustomer addYCustomer(YCustomer yCustomer)
		throws SystemException {
		yCustomer.setNew(true);

		return yCustomerPersistence.update(yCustomer);
	}

	/**
	 * Creates a new y customer with the primary key. Does not add the y customer to the database.
	 *
	 * @param yCustomerId the primary key for the new y customer
	 * @return the new y customer
	 */
	@Override
	public YCustomer createYCustomer(long yCustomerId) {
		return yCustomerPersistence.create(yCustomerId);
	}

	/**
	 * Deletes the y customer with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param yCustomerId the primary key of the y customer
	 * @return the y customer that was removed
	 * @throws PortalException if a y customer with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public YCustomer deleteYCustomer(long yCustomerId)
		throws PortalException, SystemException {
		return yCustomerPersistence.remove(yCustomerId);
	}

	/**
	 * Deletes the y customer from the database. Also notifies the appropriate model listeners.
	 *
	 * @param yCustomer the y customer
	 * @return the y customer that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public YCustomer deleteYCustomer(YCustomer yCustomer)
		throws SystemException {
		return yCustomerPersistence.remove(yCustomer);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(YCustomer.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return yCustomerPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.yyms.adp.aaa.model.impl.YCustomerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return yCustomerPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.yyms.adp.aaa.model.impl.YCustomerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return yCustomerPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return yCustomerPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return yCustomerPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public YCustomer fetchYCustomer(long yCustomerId) throws SystemException {
		return yCustomerPersistence.fetchByPrimaryKey(yCustomerId);
	}

	/**
	 * Returns the y customer with the matching UUID and company.
	 *
	 * @param uuid the y customer's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching y customer, or <code>null</code> if a matching y customer could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public YCustomer fetchYCustomerByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return yCustomerPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the y customer matching the UUID and group.
	 *
	 * @param uuid the y customer's UUID
	 * @param groupId the primary key of the group
	 * @return the matching y customer, or <code>null</code> if a matching y customer could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public YCustomer fetchYCustomerByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return yCustomerPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the y customer with the primary key.
	 *
	 * @param yCustomerId the primary key of the y customer
	 * @return the y customer
	 * @throws PortalException if a y customer with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public YCustomer getYCustomer(long yCustomerId)
		throws PortalException, SystemException {
		return yCustomerPersistence.findByPrimaryKey(yCustomerId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return yCustomerPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the y customer with the matching UUID and company.
	 *
	 * @param uuid the y customer's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching y customer
	 * @throws PortalException if a matching y customer could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public YCustomer getYCustomerByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return yCustomerPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the y customer matching the UUID and group.
	 *
	 * @param uuid the y customer's UUID
	 * @param groupId the primary key of the group
	 * @return the matching y customer
	 * @throws PortalException if a matching y customer could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public YCustomer getYCustomerByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return yCustomerPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the y customers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.yyms.adp.aaa.model.impl.YCustomerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of y customers
	 * @param end the upper bound of the range of y customers (not inclusive)
	 * @return the range of y customers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<YCustomer> getYCustomers(int start, int end)
		throws SystemException {
		return yCustomerPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of y customers.
	 *
	 * @return the number of y customers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getYCustomersCount() throws SystemException {
		return yCustomerPersistence.countAll();
	}

	/**
	 * Updates the y customer in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param yCustomer the y customer
	 * @return the y customer that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public YCustomer updateYCustomer(YCustomer yCustomer)
		throws SystemException {
		return yCustomerPersistence.update(yCustomer);
	}

	/**
	 * Returns the y customer local service.
	 *
	 * @return the y customer local service
	 */
	public com.yyms.adp.aaa.service.YCustomerLocalService getYCustomerLocalService() {
		return yCustomerLocalService;
	}

	/**
	 * Sets the y customer local service.
	 *
	 * @param yCustomerLocalService the y customer local service
	 */
	public void setYCustomerLocalService(
		com.yyms.adp.aaa.service.YCustomerLocalService yCustomerLocalService) {
		this.yCustomerLocalService = yCustomerLocalService;
	}

	/**
	 * Returns the y customer remote service.
	 *
	 * @return the y customer remote service
	 */
	public com.yyms.adp.aaa.service.YCustomerService getYCustomerService() {
		return yCustomerService;
	}

	/**
	 * Sets the y customer remote service.
	 *
	 * @param yCustomerService the y customer remote service
	 */
	public void setYCustomerService(
		com.yyms.adp.aaa.service.YCustomerService yCustomerService) {
		this.yCustomerService = yCustomerService;
	}

	/**
	 * Returns the y customer persistence.
	 *
	 * @return the y customer persistence
	 */
	public YCustomerPersistence getYCustomerPersistence() {
		return yCustomerPersistence;
	}

	/**
	 * Sets the y customer persistence.
	 *
	 * @param yCustomerPersistence the y customer persistence
	 */
	public void setYCustomerPersistence(
		YCustomerPersistence yCustomerPersistence) {
		this.yCustomerPersistence = yCustomerPersistence;
	}

	/**
	 * Returns the y services local service.
	 *
	 * @return the y services local service
	 */
	public com.yyms.adp.aaa.service.YServicesLocalService getYServicesLocalService() {
		return yServicesLocalService;
	}

	/**
	 * Sets the y services local service.
	 *
	 * @param yServicesLocalService the y services local service
	 */
	public void setYServicesLocalService(
		com.yyms.adp.aaa.service.YServicesLocalService yServicesLocalService) {
		this.yServicesLocalService = yServicesLocalService;
	}

	/**
	 * Returns the y services remote service.
	 *
	 * @return the y services remote service
	 */
	public com.yyms.adp.aaa.service.YServicesService getYServicesService() {
		return yServicesService;
	}

	/**
	 * Sets the y services remote service.
	 *
	 * @param yServicesService the y services remote service
	 */
	public void setYServicesService(
		com.yyms.adp.aaa.service.YServicesService yServicesService) {
		this.yServicesService = yServicesService;
	}

	/**
	 * Returns the y services persistence.
	 *
	 * @return the y services persistence
	 */
	public YServicesPersistence getYServicesPersistence() {
		return yServicesPersistence;
	}

	/**
	 * Sets the y services persistence.
	 *
	 * @param yServicesPersistence the y services persistence
	 */
	public void setYServicesPersistence(
		YServicesPersistence yServicesPersistence) {
		this.yServicesPersistence = yServicesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.yyms.adp.aaa.model.YCustomer",
			yCustomerLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.yyms.adp.aaa.model.YCustomer");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return YCustomer.class;
	}

	protected String getModelClassName() {
		return YCustomer.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = yCustomerPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.yyms.adp.aaa.service.YCustomerLocalService.class)
	protected com.yyms.adp.aaa.service.YCustomerLocalService yCustomerLocalService;
	@BeanReference(type = com.yyms.adp.aaa.service.YCustomerService.class)
	protected com.yyms.adp.aaa.service.YCustomerService yCustomerService;
	@BeanReference(type = YCustomerPersistence.class)
	protected YCustomerPersistence yCustomerPersistence;
	@BeanReference(type = com.yyms.adp.aaa.service.YServicesLocalService.class)
	protected com.yyms.adp.aaa.service.YServicesLocalService yServicesLocalService;
	@BeanReference(type = com.yyms.adp.aaa.service.YServicesService.class)
	protected com.yyms.adp.aaa.service.YServicesService yServicesService;
	@BeanReference(type = YServicesPersistence.class)
	protected YServicesPersistence yServicesPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private YCustomerLocalServiceClpInvoker _clpInvoker = new YCustomerLocalServiceClpInvoker();
}